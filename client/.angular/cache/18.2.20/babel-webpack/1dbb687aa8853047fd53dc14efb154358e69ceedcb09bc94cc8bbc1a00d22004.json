{"ast":null,"code":"import { signal } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5179/api'; // Your backend API URL\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.tokenKey = 'auth_token';\n    // Signals for reactive state management\n    this.isAuthenticated = signal(false);\n    this.currentUser = signal(null);\n    this.isLoading = signal(false);\n    this.checkAuthStatus();\n  }\n  login(credentials) {\n    this.isLoading.set(true);\n    return this.http.post(`${this.apiUrl}/auth/login`, credentials).pipe(tap(response => {\n      this.setAuthData(response);\n      this.isLoading.set(false);\n    }));\n  }\n  logout() {\n    localStorage.removeItem(this.tokenKey);\n    localStorage.removeItem('user_data');\n    this.currentUserSubject.next(null);\n    this.isAuthenticated.set(false);\n    this.currentUser.set(null);\n  }\n  setAuthData(response) {\n    localStorage.setItem(this.tokenKey, response.token);\n    localStorage.setItem('user_data', JSON.stringify(response.user));\n    this.currentUserSubject.next(response.user);\n    this.isAuthenticated.set(true);\n    this.currentUser.set(response.user);\n  }\n  checkAuthStatus() {\n    const token = localStorage.getItem(this.tokenKey);\n    const userData = localStorage.getItem('user_data');\n    if (token && userData) {\n      try {\n        const user = JSON.parse(userData);\n        this.currentUserSubject.next(user);\n        this.isAuthenticated.set(true);\n        this.currentUser.set(user);\n      } catch (error) {\n        this.logout();\n      }\n    }\n  }\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["signal","BehaviorSubject","tap","AuthService","constructor","http","apiUrl","currentUserSubject","tokenKey","isAuthenticated","currentUser","isLoading","checkAuthStatus","login","credentials","set","post","pipe","response","setAuthData","logout","localStorage","removeItem","next","setItem","token","JSON","stringify","user","getItem","userData","parse","error","getToken","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\fortu\\OneDrive\\Desktop\\Web Development\\ResDirectThirdVersion\\PropertyListingAPI\\client\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable, signal } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { LoginRequest, LoginResponse, User } from '../models/user.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = 'http://localhost:5179/api'; // Your backend API URL\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  private tokenKey = 'auth_token';\r\n  \r\n  // Signals for reactive state management\r\n  public isAuthenticated = signal(false);\r\n  public currentUser = signal<User | null>(null);\r\n  public isLoading = signal(false);\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.checkAuthStatus();\r\n  }\r\n\r\n  login(credentials: LoginRequest): Observable<LoginResponse> {\r\n    this.isLoading.set(true);\r\n    \r\n    return this.http.post<LoginResponse>(`${this.apiUrl}/auth/login`, credentials)\r\n      .pipe(\r\n        tap(response => {\r\n          this.setAuthData(response);\r\n          this.isLoading.set(false);\r\n        })\r\n      );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem(this.tokenKey);\r\n    localStorage.removeItem('user_data');\r\n    this.currentUserSubject.next(null);\r\n    this.isAuthenticated.set(false);\r\n    this.currentUser.set(null);\r\n  }\r\n\r\n  private setAuthData(response: LoginResponse): void {\r\n    localStorage.setItem(this.tokenKey, response.token);\r\n    localStorage.setItem('user_data', JSON.stringify(response.user));\r\n    this.currentUserSubject.next(response.user);\r\n    this.isAuthenticated.set(true);\r\n    this.currentUser.set(response.user);\r\n  }\r\n\r\n  private checkAuthStatus(): void {\r\n    const token = localStorage.getItem(this.tokenKey);\r\n    const userData = localStorage.getItem('user_data');\r\n    \r\n    if (token && userData) {\r\n      try {\r\n        const user = JSON.parse(userData);\r\n        this.currentUserSubject.next(user);\r\n        this.isAuthenticated.set(true);\r\n        this.currentUser.set(user);\r\n      } catch (error) {\r\n        this.logout();\r\n      }\r\n    }\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem(this.tokenKey);\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}