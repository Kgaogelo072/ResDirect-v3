{"ast":null,"code":"import { signal } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'https://localhost:7063/api'; // Your backend API URL\n      this.currentUserSubject = new BehaviorSubject(null);\n      this.tokenKey = 'auth_token';\n      // Signals for reactive state management\n      this.isAuthenticated = signal(false);\n      this.currentUser = signal(null);\n      this.isLoading = signal(false);\n      this.checkAuthStatus();\n    }\n    login(credentials) {\n      this.isLoading.set(true);\n      return this.http.post(`${this.apiUrl}/auth/login`, credentials).pipe(tap(response => {\n        this.setAuthData(response);\n        this.isLoading.set(false);\n      }));\n    }\n    logout() {\n      localStorage.removeItem(this.tokenKey);\n      localStorage.removeItem('user_data');\n      this.currentUserSubject.next(null);\n      this.isAuthenticated.set(false);\n      this.currentUser.set(null);\n    }\n    setAuthData(response) {\n      localStorage.setItem(this.tokenKey, response.token);\n      localStorage.setItem('user_data', JSON.stringify(response.user));\n      this.currentUserSubject.next(response.user);\n      this.isAuthenticated.set(true);\n      this.currentUser.set(response.user);\n    }\n    checkAuthStatus() {\n      const token = localStorage.getItem(this.tokenKey);\n      const userData = localStorage.getItem('user_data');\n      if (token && userData) {\n        try {\n          const user = JSON.parse(userData);\n          this.currentUserSubject.next(user);\n          this.isAuthenticated.set(true);\n          this.currentUser.set(user);\n        } catch (error) {\n          this.logout();\n        }\n      }\n    }\n    getToken() {\n      return localStorage.getItem(this.tokenKey);\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}